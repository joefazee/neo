services:
  postgres:
    image: postgres:17.5-alpine3.21
    container_name: neo_postgres
    environment:
      POSTGRES_DB: neo_dev
      POSTGRES_USER: neo
      POSTGRES_PASSWORD: secret
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - neo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U neo -d neo_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:8.0.2-alpine
    container_name: neo_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - neo_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Main API Application
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile-app
    container_name: neo_api
    environment:
      - GO_ENV=development
      - APP_PORT=8080
      - APP_HOST=0.0.0.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=neo
      - DB_PASSWORD=secret
      - DB_NAME=neo_dev
      - DB_SSL_MODE=disable
      - DB_MAX_OPEN_CONNS=25
      - DB_MAX_IDLE_CONNS=5
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-super-secret-key-change-in-production
      - JWT_EXPIRATION=15m
      - JWT_REFRESH_EXPIRATION=168h
      - LOG_LEVEL=debug
      - LOG_FORMAT=json
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - neo_network
    volumes:
      - ./.env:/app/.env.development
    restart: unless-stopped

  # Database migration service
  migrate:
    build:
      context: .
      dockerfile: docker/Dockerfile-migrations
    container_name: neo_migrate
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=neo
      - DB_PASSWORD=secret
      - DB_NAME=neo_dev
      - DB_SSL_MODE=disable
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - neo_network
    volumes:
      - ./migrations:/migrations

  # Localstack for AWS services mocking (testing)
  localstack:
    image: localstack/localstack:4.4
    container_name: neo_localstack
    environment:
      - SERVICES=s3,ses,secretsmanager
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
    ports:
      - "4566:4566"
    volumes:
      - localstack_data:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - neo_network

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:v3.4.1
    container_name: neo_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - neo_network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:12.0.1-ubuntu
    container_name: neo_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - neo_network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  localstack_data:
  prometheus_data:
  grafana_data:

networks:
  neo_network:
    driver: bridge
